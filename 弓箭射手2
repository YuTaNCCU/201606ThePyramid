//rect顏色跟大小 
#include <stdio.h>
#include <windows.h>
#include <string.h>  
#include <stdlib.h>   // rand() srand()  system ("cls")
#include <time.h>    // time()
#include <conio.h> 
#include <math.h>
int sw=1920;
int sh=1080;
#define sx 27
#define sy 37
#define pixel 40
#define HP 999
#define mn 20 //1~100
#define bn 2    //bomb number
#define spacetime 0.2
///////////////////////////以下貼圖+開視窗///////////////////////////////////// 

typedef struct pic{  //每一張圖都要有對應的資訊
	HDC dc;
	HBITMAP hbm;
	int width;
	int height;	
}picture ;
HWND hwnd;
HDC  dc1,dc2,dc3; 
HBITMAP hbm,hbm3;
picture p[200];
MSG msg;
int client_sw,client_sh;
HBRUSH tempBrush = CreateSolidBrush( RGB(255, 0, 0) );
picture readBMP(const char *fname, HDC dc1)//亦需相容於dc1
	{
	 	picture tp;
		tp.dc =CreateCompatibleDC(dc1) ;
		tp.hbm=(HBITMAP)LoadImage(NULL,fname,IMAGE_BITMAP,0,0,LR_LOADFROMFILE);
		
		//偵測有無正確讀檔 {1 
		BITMAP temp ;
		GetObject(tp.hbm,sizeof(BITMAP), &temp) ; //將讀到的東西丟到 temp裡面 
		if((temp.bmWidth<=0)||(temp.bmHeight<=0)) //若未讀到東西>圖片長寬<=0 
		{
			MessageBox(NULL,fname,"無法讀取",MB_ICONERROR);
		}
		tp.width=temp.bmWidth;
		tp.height=temp.bmHeight;
		SelectObject(tp.dc,tp.hbm);	
		return tp;	
	}
LRESULT CALLBACK WndProc( HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam ) {
	if( message == WM_DESTROY ) {
		PostQuitMessage( 0 );
		return 0;
	}
	else if( message == WM_CLOSE ) {
		DestroyWindow( hwnd );
		return 0;
	}
	else
		return DefWindowProc( hwnd, message, wparam, lparam );
}
void reg_class( const char *cname ) {
	WNDCLASS wnd;
	ZeroMemory( &wnd, sizeof( WNDCLASS ) );
	wnd.style = CS_HREDRAW | CS_VREDRAW;
	wnd.lpfnWndProc = WndProc;
	wnd.hIcon = (HICON)LoadImage( NULL, "pic\\金字塔.ico" ,IMAGE_CURSOR, 0, 0, LR_LOADFROMFILE );
	wnd.hbrBackground = ( HBRUSH )COLOR_BACKGROUND;
	wnd.lpszClassName = cname;
	
	if( RegisterClass( &wnd ) == 0 ){
		MessageBox( NULL, "無法註冊", "In reg_class", MB_ICONERROR );
	}
}
///////////////////////////以上貼圖+開視窗///////////////////////////////////// 


//////////以下迷宮自動生成////////////
int g[100][100] ,used[100][100],ret[100][100],n=sx/2, m=sy/2,dx[] = {0,0,1,-1},dy[] = {1,-1,0,0};
void dfs(int x, int y, int px, int py) {
    if(x < 0 || y < 0 || x >= n || y >= m)
        return;
    if(used[x][y])
        return;
    used[x][y] = 1;
    if(px >= 0) {
        ret[((x*2+1)+(px*2+1))/2][((y*2+1)+(py*2+1))/2] = 1;
    }
    ret[x*2+1][y*2+1] = 1;
    int cnt = 0, dir = 0;
    if(x == n-1 && y == m-1)    return;
    while(cnt < 10) {
        dir = rand()%4;
        dfs(x+dx[dir], y+dy[dir], x, y);
        cnt++;
    }
}
//////////以上迷宮自動生成////////////


struct mover   //struct：宣告將使用結構   mover ：玩家+怪獸 
{
	int tp;  //type==1 代表有啟用 ； type==0 代表未啟用
	int nx;  //new x 座標  
	int ny;  //new y 座標 
	int ox;  //old x 座標 
	int oy;  //old y 座標  
	int d;  //Direction：玩家+怪獸 的移動方向 
	int e;  //evermove：在此輪迴圈中是否移動過 
	int sl;  //space_lock：是否被時間鎖住 
	double st;  //space_time
	LARGE_INTEGER t1; 
	LARGE_INTEGER t2; 
};
struct weapon
{                  
	int tp ;  //weapon 種類(type) 
	int tm;   //time
	int x;  //weapon  x 座標 
	int y;  //weapon  y 座標
	int e;  //evermove：在此輪迴圈中是否移動過 
	int sl;  //space_lock：是否被時間鎖住 
	double st;  //space_time
	LARGE_INTEGER t1; 
	LARGE_INTEGER t2; 
};

void Declare(){};
struct mover mover[130];     //宣告陣列mover[30] 為結構mover的形態   
	//mover[21~30]代表玩家   mover[31~40]代表各種怪獸
struct weapon w[21];
int i,j,nmn,hp,Map_1[sx][sy],Level,fromlevel;
char display[100];  
RECT rect;
LARGE_INTEGER  frequency;

MCIERROR music_err;
MCI_OPEN_PARMS music_open[200];
MCI_OPEN_PARMS music_play[200];
char errs[1024];

void Boundary()
{
	if (GetAsyncKeyState(192)<0)   //按~ 
	{
		MessageBox(NULL,"在Boundary 按了~","提示",MB_OK);
	}
	for(i=0;i<sx;i+=1)
	{
		for(j=0;j<sy;j+=1)
		{
			if (ret[i][j]==0)
				Map_1[i][j]=11;
			else if (ret[i][j]==1)
				Map_1[i][j]=0;
		}
	}
	for(i=0;i<sx;i+=1)
	{
		for(j=0;j<sy;j+=1)
		{
			if (Map_1[i][j]==0)
			{
				if(ret[i+1][j]==1)
					Map_1[i][j]++;
				if(ret[i][j+1]==1)
					Map_1[i][j]++;
				if(ret[i-1][j]==1)
					Map_1[i][j]++;
				if(ret[i][j-1]==1)
					Map_1[i][j]++;
			}
				
		}
	}
	for(i=12;i<=16;i++)   //Level的轉換點 
	{
		for(j=17;j<=21;j++)
		{
			Map_1[i][j]=0;  
		}
	}
	for(i=13;i<=15;i++)   
	{
		for(j=18;j<=20;j++)
		{
			Map_1[i][j]=12;  
		}
	}
	Map_1[13][18]=13; 
	
	for(i=21;i<=25;i++)   //進入小遊戲的轉換點 1
	{
		for(j=17;j<=21;j++)
		{
			Map_1[i][j]=0;  
		}
	}
	for(i=22;i<=24;i++)   
	{
		for(j=18;j<=20;j++)
		{
			Map_1[i][j]=12;  
		}
	}
	Map_1[22][18]=13; 
	
	for(i=21;i<=25;i++)   //進入小遊戲的轉換點 2
	{
		for(j=31;j<=35;j++)
		{
			Map_1[i][j]=0;  
		}
	}
	for(i=22;i<=24;i++)   
	{
		for(j=32;j<=34;j++)
		{
			Map_1[i][j]=12;  
		}
	}
	Map_1[22][32]=13; 
	
	for(i=1;i<=5;i++)   //進入小遊戲的轉換點 3
	{
		for(j=31;j<=35;j++)
		{
			Map_1[i][j]=0;  
		}
	}
	for(i=2;i<=4;i++)   
	{
		for(j=32;j<=34;j++)
		{
			Map_1[i][j]=12;  
		}
	}
	Map_1[2][32]=13; 
	
	for(i=1;i<=5;i++)   //進入小遊戲的轉換點 4
	{
		for(j=17;j<=21;j++)
		{
			Map_1[i][j]=0;  
		}
	}
	for(i=2;i<=4;i++)   
	{
		for(j=18;j<=20;j++)
		{
			Map_1[i][j]=12;  
		}
	}
	Map_1[2][18]=13; 
	
	for(i=1;i<=5;i++)   //進入小遊戲的轉換點 5
	{
		for(j=1;j<=5;j++)
		{
			Map_1[i][j]=0;  
		}
	}
	for(i=2;i<=4;i++)   
	{
		for(j=2;j<=4;j++)
		{
			Map_1[i][j]=12;  
		}
	}
	Map_1[2][2]=13; 
	
	for(i=21;i<=25;i++)   //	怪物產生器
	{
		for(j=1;j<=5;j++)
		{
			Map_1[i][j]=0;  
		}
	}
	for(i=22;i<=24;i++)   
	{
		for(j=2;j<=4;j++)
		{
			Map_1[i][j]=14;  
		}
	}
		Map_1[22][2]=15; 
	
	
};

void NextStep (int k)
{
	if (GetAsyncKeyState(192)<0)   //按~ 
	{
		MessageBox(NULL,"在NextStep 按了~","提示",MB_OK);
	}
	mover[k].ox=mover[k].nx;
	mover[k].oy=mover[k].ny;
	switch (mover[k].d)
	{
		case 37: 
			mover[k].ny--;
			mover[k].e=1; 
			break;
		case 38: 
			mover[k].nx--;
			mover[k].e=1;
			break;
		case 39: 
			mover[k].ny++;
			mover[k].e=1;
			break;
		case 40: 
			mover[k].nx++;
			mover[k].e=1;
			break;
		default:
			break;
	}
};

void BoundaryCondition(int k)
{
	if (GetAsyncKeyState(192)<0)   //按~ 
	{
		MessageBox(NULL,"在BoundaryCondition按了~","提示",MB_OK);
	}
	if(k<=30)
	{
		if (Map_1[mover[k].nx][mover[k].ny]>=12 && Map_1[mover[k].nx][mover[k].ny]<=13) //如果玩家小遊戲 
			{
				Level=11;
				mover[k].nx=mover[k].ox;
				mover[k].ny=mover[k].oy;
				mover[k].d=0;          //並停止移動 
			}
		else if (Map_1[mover[k].nx][mover[k].ny]>=11 && Map_1[mover[k].nx][mover[k].ny]<=20) //如果玩家跑到牆壁內，即退回之前的位置 
			{
				mover[k].nx=mover[k].ox;
				mover[k].ny=mover[k].oy;
				mover[k].d=0;          //並停止移動 
			}
		
	}
	else if(k<=130)
	{
	 	
		if (Map_1[mover[k].nx][mover[k].ny]==3  || Map_1[mover[k].nx][mover[k].ny]==4)
		{
				mover[k].d=37 +rand()%4 ;
		}
		
		while (Map_1[mover[k].nx][mover[k].ny]>=11 && Map_1[mover[k].nx][mover[k].ny]<=20)
			{
				mover[k].nx=mover[k].ox;
				mover[k].ny=mover[k].oy;
				mover[k].d=37 +rand()%4 ;
				NextStep (k);
			}
	}
};

void Sound_Interval(int Tracks,int action)  //action： 0關  / 1開 
{
	if(action==1)
	{
		//撥放音樂 
		music_err=mciSendCommand(music_open[Tracks].wDeviceID,MCI_PLAY,0,(DWORD_PTR)&music_play[Tracks]);
			if(music_err)
			{
				mciGetErrorString(music_err,errs,sizeof(errs));
				MessageBox(NULL, errs, "音效", MB_OK ); 
			} 
	}
		
	else if(action==0)
	{
		//在最後須加上以下內容，才能在關閉視窗後，停止撥放音樂
		mciSendCommand(music_open[Tracks].wDeviceID,MCI_STOP,0,(DWORD_PTR)&music_play[Tracks]);
	} 
} ;
void Sound_Once(int Tracks)
{
	if(Tracks!=0)
	{
		
		//停止音樂
		mciSendCommand(music_open[Tracks].wDeviceID,MCI_STOP,MCI_WAIT,(DWORD_PTR)&music_play[Tracks]);
		//回到最開始
		mciSendCommand(music_open[Tracks].wDeviceID,MCI_SEEK,MCI_SEEK_TO_START,0);
		
		//撥放音樂 
		music_err=mciSendCommand(music_open[Tracks].wDeviceID,MCI_PLAY,0,(DWORD_PTR)&music_play[Tracks]);
			if(music_err)
			{
				mciGetErrorString(music_err,errs,sizeof(errs));
				MessageBox(NULL, errs, "音效", MB_OK ); 
			} 
	}
		
	if(Tracks==0)
	{
		//在最後須加上以下內容，才能在關閉視窗後，停止撥放音樂
		for (i=1;i<=3;i++)
		{
			mciSendCommand(music_open[i].wDeviceID,MCI_STOP,0,(DWORD_PTR)&music_play[i]);
			mciSendCommand(music_open[i].wDeviceID,MCI_CLOSE,0,(DWORD_PTR)&music_play[i]);
		}
	} 
};
void GetKey()
{	
	if (GetAsyncKeyState(192)<0)   //按~ 
	{
		MessageBox(NULL,"在GetKey按了~","提示",MB_OK);
	}
	for(i=37,mover[21].d=0;i<=40;i++)
	{
		if(GetAsyncKeyState(i)<0)
		{
			mover[21].d=i;
		}
		
	}
	
	int thesame=0;	//玩家21號釋放炸彈
	if(GetAsyncKeyState(32)<0)
	{	        
		for(i=1;w[i].tp==1;i++)
		{
			if (i>bn)
				thesame=1;	
		}
		for(j=1;j<=bn;j++)
		{
			if(mover[21].nx==w[j].x  &&  mover[21].ny==w[j].y)
			{
				thesame=1;
			}			
		}
		if(thesame==0)
		{
			w[i].x=mover[21].nx;
			w[i].y=mover[21].ny; 
			w[i].tp=1;
			w[i].tm=5;	
		}
	} 
} ;

void TimeControl(int tp,int k)
{
		if (GetAsyncKeyState(192)<0)   //按~ 
	{
		MessageBox(NULL,"在TimeControl按了~","提示",MB_OK);
	}
	if(tp==1)
	{
		if(mover[k].e==1)
		{
			mover[k].sl=1 ;								
			QueryPerformanceCounter(&(mover[k].t1));
		}
		if(mover[k].sl==1) 						     //若是鎖上，看是否可以解鎖 
		{
			QueryPerformanceCounter(&(mover[k].t2));          //結束計時 
			QueryPerformanceFrequency(&frequency);	//取得電腦執行的頻率 ex:3.5GHz 										  //知道結束時間
			if((double)((mover[k].t2).QuadPart-(mover[k].t1).QuadPart)/frequency.QuadPart>=mover[k].st)  //(結束時間-開始時間)/頻率 
			{
				mover[k].sl=0; 						//解鎖 
			} 
		}
	}
	else if (tp==2)
	{
		if(w[k].e==1)
		{
			w[k].sl=1 ;								
			QueryPerformanceCounter(&(w[k].t1));
		}
		if(w[k].sl==1) 						     //若是鎖上，看是否可以解鎖 
		{
			QueryPerformanceCounter(&(w[k].t2));          //結束計時 
			QueryPerformanceFrequency(&frequency);	//取得電腦執行的頻率 ex:3.5GHz 										  //知道結束時間
			if((double)((w[k].t2).QuadPart-(w[k].t1).QuadPart)/frequency.QuadPart>=w[k].st)  //(結束時間-開始時間)/頻率 
			{
				w[k].sl=0; 						//解鎖 
			} 
		}
	}
	else if (tp==3)
	{
		if(	mover[k].e==1)
		{
			mover[k].sl=1 ;								
			QueryPerformanceCounter(&(mover[k].t1));
		}
		if(	mover[k].sl==1) 						     //若是鎖上，看是否可以解鎖 
		{
			QueryPerformanceCounter(&(	mover[k].t2));          //結束計時 
			QueryPerformanceFrequency(&frequency);	//取得電腦執行的頻率 ex:3.5GHz 										  //知道結束時間
			if((double)((mover[k].t2).QuadPart-(mover[k].t1).QuadPart)/frequency.QuadPart>=	mover[k].st)  //(結束時間-開始時間)/頻率 
			{
				mover[k].sl=0; 						//解鎖 
			} 
		}
	}
};

void Bomp(int bx , int by) 
{
	int k,l;
	Map_1[bx][by]=51;
	for (l=0;  (l<sx) &&(Map_1[bx+l][by]!=11);l++)
	{
		Map_1[bx+l][by]=51;
	}
	for (l=0;(l<sy) &&(Map_1[bx][by+l]!=11);l++)
	{
		Map_1[bx][by+l]=51;
	}
	for (l=0;(l<sx) &&(Map_1[bx-l][by]!=11);l++)
	{
		Map_1[bx-l][by]=51;
	}
	for (l=0;(l<sy) &&(Map_1[bx][by-l]!=11);l++)
	{
		Map_1[bx][by-l]=51;
	}				
	
	
	for (k=31;k<=130;k++)
	{
		if(   Map_1[mover[k].nx][mover[k].ny]==51 )
		{	
			Map_1[mover[k].nx][mover[k].ny]=0;
			mover[k].tp=0;
			mover[k].nx=0;
			mover[k].ny=0;
			mover[k].ox=0;
			mover[k].oy=0;
		}
	}		
};	
void Weapon() 
{
	if (GetAsyncKeyState(192)<0)   //按~ 
	{
		MessageBox(NULL,"在Weapon按了~","提示",MB_OK);
	}
	for(i=0;i<sx;i++)   //清空炸彈痕跡 
	{
		for(j=0;j<sw;j++)
		{
			if(Map_1[i][j]==51)
			  Map_1[i][j]=0;
		}
	}
	
	for(i=1;i<=bn;i++)
	{
		w[i].e=0;
		if (w[i].tp==1)
		{
			Map_1[w[i].x][w[i].y]=51;  	
			if (w[i].sl==0)
			{
				if (w[i].tm>0)
				{
					w[i].tm--;	
				}
				else if (w[i].tm==0)
				{
					Bomp(w[i].x,w[i].y);
					w[i].x=0;
					w[i].y=0;
					w[i].tp=0;
				}
				w[i].e=1;
			}
		}
		TimeControl(2,i);
	}		
} ;
void CleanArray()
{
	memset(Map_1,0,sizeof(Map_1));    //清空陣列 Map_1
	for (i=0;i<=130;i++)				  //清空結構陣列mover[40] 
	{
		memset(&mover[i],0,sizeof(struct mover)); 
	} 
	for (i=0;i<=20;i++)	   //清空結構陣列w[20] 
	{
		memset(&w[i],0,sizeof(struct weapon)); 
	}     
};
void InitialSetting()
{
	memset(g, 0, sizeof(g)); 
	memset(used, 0, sizeof(used));
	memset(ret, 0, sizeof(ret));
	srand((unsigned)time(NULL));
	dfs(0,0, -1,-1);
	Boundary();
	
	mover[21].tp=1;
	mover[21].st=spacetime*0.1;
   
	do{                                //玩家起始位置
		mover[21].nx=rand()%sx; 
		mover[21].ny=rand()%sy;
	}while(Map_1[mover[21].nx][mover[21].ny]>=11 && Map_1[mover[21].nx][mover[21].ny]<=20 );
	Map_1[mover[21].nx][mover[21].ny]=21; 
	hp=HP;
	
	for (i=31;i<=30+5;i++) //怪獸起始位置  
	{
		mover[i].tp=1;	
		mover[i].st=spacetime*1.5;
		do{
			mover[i].nx=rand()%sx; 
			mover[i].ny=rand()%sy ;
		}while(Map_1[mover[i].nx][mover[i].ny]==11);
		Map_1[mover[i].nx][mover[i].ny]=31; 
		mover[i].d=37+rand()%4;
	}
	for (i=1;i<=20;i++) //炸彈起始  
	{
		w[i].st=0.5;
		w[i].e=0;
	}
	
	SetStretchBltMode(dc1, HALFTONE); //改變StretchBlt的演算法 
	SetBrushOrgEx(dc1, 0, 0, NULL);
	
	music_open[1].lpstrDeviceType="mpegvideo";
	music_open[1].lpstrElementName="mp3//驚悚大師希區考克電影原聲帶之一.mp3";
	
	music_open[2].lpstrDeviceType="mpegvideo";
	music_open[2].lpstrElementName="mp3//Dungeon 1.mp3";
	
	music_open[3].lpstrDeviceType="mpegvideo";
	music_open[3].lpstrElementName="mp3//跑_封閉的空間.mp3";
	
	music_open[4].lpstrDeviceType="mpegvideo";
	music_open[4].lpstrElementName="mp3//Kalimba.mp3";
	
	//開啟音樂 
	for (i=1;i<=3;i++)
	{
		music_err=mciSendCommand( 0,MCI_OPEN,MCI_OPEN_ELEMENT|MCI_OPEN_TYPE,(DWORD_PTR)&music_open[i]); 
		if(music_err)
		{
			mciGetErrorString(music_err,errs,sizeof(errs));
			MessageBox(NULL, errs, "音效", MB_OK );
		} 
	}
	
};
void EndBreak()
{	
	if(WM_QUIT==msg.message)  //視窗打叉-->程式中斷 
		Level=0;
	
	if(hp<=0)             //若hp==0，則跳出迴圈  
	{
		Level=0;
		MessageBox(NULL,"已無生命值","提示",MB_OK);
	}	
		
	for(i=31,nmn=0;i<=130;i++)   //若殺光所有怪物，則跳出迴圈  
	{ 
		if( mover[i].tp==1)
		{
			
			nmn++;
		}
	}
	if( nmn==0)
	{
		Level=0;
		MessageBox(NULL,"已殺光所有怪物","提示",MB_OK);
	}
	
	if (GetAsyncKeyState(27)<0)   //按esc結束 
	{
		//MessageBox(NULL,"已按esc結束","提示",MB_OK);                                         //
		//MessageBox(NULL,"已按esc結束","提示",MB_OK);
		Level=0; 
	}
	if (GetAsyncKeyState(192)<0)   //按~ 
	{
		MessageBox(NULL,"在 endbreak 按了~","提示",MB_OK);
		printf("在 endbreak 按了~");
		getch();
		system("pause");
	}
	fromlevel=10;
	while(PeekMessage( &msg, NULL, 0, 0, PM_REMOVE ) > 0)
	{
		TranslateMessage( &msg );
		DispatchMessage( &msg );
	}
};
void MoverBehavior()
{
	if (GetAsyncKeyState(192)<0)   //按~ 
	{
		MessageBox(NULL,"在MoverBehavior按了~","提示",MB_OK);
	}
	for (i=31;i<=130;i++)  //怪獸 
	{
		mover[i].e=0;
		if(mover[i].sl==0 && mover[i].tp==1)//未被鎖住才能動 
		{
			if (i>=31)      //玩家若被怪獸碰到 
			{
				
				if(mover[21].nx==mover[i].nx && mover[21].ny==mover[i].ny)
				{
					hp--;	
				}
			}
			NextStep(i);
			BoundaryCondition(i);
		}
		if(mover[i].tp==1)
		{
			Map_1[mover[i].ox][mover[i].oy]=0;   //怪獸舊位置=道路 
			Map_1[mover[i].nx][mover[i].ny]=31;   //怪獸新位置=自己的值 
		}
		TimeControl(1,i);
		while(PeekMessage( &msg, NULL, 0, 0, PM_REMOVE ) > 0)
		{
			TranslateMessage( &msg );
			DispatchMessage( &msg );
		}
	}
	for (i=21;i<=21;i++)//玩家
	{
		mover[i].e=0;
		if(mover[i].sl==0) //未被鎖住才能動 
		{
			NextStep(i);
			BoundaryCondition(i);	
		}
		Map_1[mover[i].ox][mover[i].oy]=0;   //玩家舊位置=道路 
		Map_1[mover[i].nx][mover[i].ny]=i;   //玩家新位置=自己的值 
		TimeControl(1,i);
		
		if (mover[i].d!=0)   //腳步聲 
			Sound_Interval(3,1) ;
		else if (mover[i].d==0)
			Sound_Interval(3,0) ;
	}
	
	fromlevel=10;
	while(PeekMessage( &msg, NULL, 0, 0, PM_REMOVE ) > 0)
	{
		TranslateMessage( &msg );
		DispatchMessage( &msg );
	}
};
void Window_Picture()
{
	reg_class( "classname" );
	HWND hwnd = CreateWindow( "classname", "第11組-驚字塔", WS_POPUP|WS_MAXIMIZE | WS_VISIBLE, 0, 0, sw, sh, NULL, NULL, NULL, NULL );

	dc1=GetDC(hwnd);    //貼圖到dc1，就會顯示在視窗上(hwnd擁有控制權的視窗)
	hbm=CreateCompatibleBitmap(dc1,sw,sh) ;
	dc2=CreateCompatibleDC(dc1);
	hbm3=CreateCompatibleBitmap(dc1,sw,sh) ;
	dc3=CreateCompatibleDC(dc1);
	SelectObject(dc2,hbm);//向系統hbm註冊dc2的使用權(註：一個hbm只能註冊一個dc2)
	SelectObject(dc3,hbm3);
	
	RECT window_rect,client_rect;
	GetWindowRect( hwnd, &window_rect );
	GetClientRect( hwnd, &client_rect );
	
	char information[100];	
	client_sw= client_rect.right-client_rect.left;
	client_sh= client_rect.bottom-window_rect.top;
	sprintf( information,"client 寬度=%d\nclient 高度=%d",client_sw,client_sh );
	//MessageBox( NULL, information, "client 資訊", MB_OK );


	p[0]=readBMP("pic//地板.bmp", dc1);  
	p[11]=readBMP("pic//牆壁.bmp", dc1);
	p[12]=readBMP("pic//小遊戲轉移點1.bmp", dc1);
	p[15]=readBMP("pic//怪物產生器.bmp", dc1);
	p[21]=readBMP("pic//玩家正面齊步.bmp", dc1);
	p[30]=readBMP("pic//玩家小圖.bmp", dc1);
	p[31]=readBMP("pic//怪物正面齊步.bmp", dc1);
	p[40]=readBMP("pic//怪物小圖.bmp", dc1);
	p[51]=readBMP("pic//爆炸.bmp", dc1);
	p[52]=readBMP("pic//背景1.bmp", dc1); 
};
void Output(int k )
{
	//改變字體 
	HFONT font1;
	font1=CreateFont(40,0,0,0,FW_NORMAL,FALSE,FALSE,FALSE,DEFAULT_CHARSET,OUT_DEFAULT_PRECIS,CLIP_DEFAULT_PRECIS,DEFAULT_QUALITY,DEFAULT_PITCH,TEXT("標楷體"));  
	//dc2畫布的字體都變為font1 
	SelectObject(dc2,font1); 
	//改變字體顏色
	SetTextColor(dc2,0x00FFFFFF);
	// 改變字體背景顏色
	SetBkColor(dc2,0x00000000);
	//TextOut 的模式：OPAQUE實心   /  TRANSPARENT透明 
	SetBkMode( dc2, OPAQUE );
	
	sprintf(display,"寬度%4d 高度%4d",client_sw,client_sh);
	TextOut(dc2,1490,0,display,strlen(display));
	 
	sprintf(display,"生命值%3d 怪獸數量%3d",hp,nmn);
	TextOut(dc2,1490,50,display,strlen(display));
	
	sprintf(display,"玩家位置(%d,%d)",mover[21].nx,mover[21].ny);
	TextOut(dc2,1490,100,display,strlen(display));
	
	//RECT rect = {0,1481,400,800};
	//rect = {0,1080,1481,440};
	//FillRect(dc2,&rect,tempBrush); //看前面宣告                                                                                  //
	
	for(i=0;i<sx && k==1;i+=1)
	{
		for(j=0;j<sy;j+=1)
		{
			if (Map_1[i][j]>=0&&Map_1[i][j]<=4)    
				TransparentBlt(dc2,j*pixel,i*pixel,pixel,pixel,p[0].dc,0,0,p[0].width,p[0].height,RGB(255,255,255));
			else if ((Map_1[i][j]<=20)&&(Map_1[i][j]>=11))
				TransparentBlt(dc2,j*pixel,i*pixel,pixel,pixel,p[11].dc,0,0,p[11].width,p[11].height,RGB(255,255,255));
		}
	}
		
	for(i=0;i<sx && k==2;i+=1)
	{
		for(j=0;j<sy;j+=1)
		{
		    if (Map_1[i][j]==13)	
				TransparentBlt(dc2,j*pixel,i*pixel,pixel*3,pixel*3,p[12].dc,0,0,p[12].width,p[12].height,RGB(255,255,255));
			else if (Map_1[i][j]==15)	
				TransparentBlt(dc2,j*pixel,i*pixel,pixel*3,pixel*3,p[15].dc,0,0,p[15].width,p[15].height,RGB(255,255,255));
			else if (Map_1[i][j]==21)
				TransparentBlt(dc2,j*pixel,i*pixel,pixel,pixel,p[21].dc,0,0,p[21].width,p[21].height,RGB(255,255,255));
			else if ((Map_1[i][j]<=40)&&(Map_1[i][j]>=31))
				TransparentBlt(dc2,j*pixel,i*pixel,pixel,pixel,p[31].dc,0,0,p[31].width,p[31].height,RGB(255,255,255));
			else if(Map_1[i][j]>=51 && Map_1[i][j]<=56)
				TransparentBlt(dc2,j*pixel,i*pixel,pixel,pixel,p[51].dc,0,0,p[51].width,p[51].height,RGB(255,255,255));
		}
	}
	if (k==2)
	{
		
		
		BitBlt(dc3,0,0,sw,sh,dc2,0,0,SRCCOPY);			  //大圖  
		
		for(i=0;i<sx;i+=1)  	//小圖 
		{
			for(j=0;j<sy;j+=1)
			{
			     if (Map_1[i][j]==21)
					TransparentBlt(dc2,j*pixel,i*pixel,pixel,pixel,p[30].dc,0,0,p[30].width,p[30].height,RGB(255,255,255));
				else if ((Map_1[i][j]<=40)&&(Map_1[i][j]>=31))
					TransparentBlt(dc2,j*pixel,i*pixel,pixel,pixel,p[40].dc,0,0,p[40].width,p[40].height,RGB(255,255,255));
			
			}
		}	
		
			
		StretchBlt(dc3,1490,200,420*0.5,330*0.5,dc2,0,0,1480,1080,SRCCOPY);   //小圖 
		//StretchBlt(dc3,1490,200,420,360,dc2,0,0,1480,1080,SRCCOPY); 
		
		StretchBlt(dc1,0,0,client_sw,client_sh,dc3,0,0,sw,sh,SRCCOPY);  //整張圖 
		//StretchBlt(dc1,0,0,client_sw,client_sh,dc2,0,0,sw,sh,SRCCOPY); 
		//TransparentBlt(dc1,0,0,client_sw,client_sh,dc2,0,0,sw,sh,RGB(253,255,255));
		//	BitBlt(dc1,0,0,sw,sh,dc2,0,0,SRCCOPY);
	}
	
		
		
};

void MonsterGenrator()
{
	mover[0].st=5;
	mover[0].e=0;
	if(mover[0].sl==0)        //MonsterGenratorLock==0
	{	        
		for(i=31;mover[i].tp==1 && i<=31+mn ;i++)
		;
		if (i!=31+mn)
		{
			j=rand()%4;
			if(j==0)
			{
				mover[i].nx=22; 
				mover[i].ny=5;
			}
			else if(j==1)
			{
				mover[i].nx=24; 
				mover[i].ny=5;
			}
			else if(j==2)
			{
				mover[i].nx=23; 
				mover[i].ny=4;
			}
			else if(j==3)
			{
				mover[i].nx=23; 
				mover[i].ny=6;
			}
			mover[i].tp=1;
			Map_1[mover[i].nx][mover[i].ny]=31; 
			mover[i].st=spacetime;
			mover[i].d=37+rand()%4;
			mover[0].e=1;
		}
		
	} 
	TimeControl(3,0);
};

void Level_1()
{	
	if( fromlevel==0)
	{
		CleanArray();
		InitialSetting();
	}
	Output(1);
	Sound_Once(2);
	while(Level==10)                                
	{		 
		//Hello();
		Boundary(); 		
		//Sleep(50);
		Output(1);	
		GetKey();									
		MoverBehavior();	
		Weapon();
		MonsterGenrator();
		Output(2);		
		EndBreak();						
	}
	//	MessageBox(NULL,"已結束主迴圈","提示",MB_OK);
	
	ReleaseDC(hwnd,dc1);//將資源還給系統
	DeleteDC(dc2);
	DeleteObject(hbm);	
	Sound_Once(0); 
}
void Level_1_2()
{
	MessageBox( NULL, "進入小遊戲", "資訊", MB_OK );
	Level=10;
	fromlevel=12;
}; 






///////////////////////////////弓箭射手{   ///////////////////////////////////////////
// x＝V0 *cos* t  y＝V0sinθ*t-0.5*g*t*t

int t,x=0,y=0,Win; 
char A1_1[80][180];
float cos1,sin1, V0, float_x, float_y,dd,d;
POINT mouse1,mouse2;

void A1_Boundary()  //設定邊界及障礙物 
{
	for(j=0;j<180;j++)  //邊界
	{
		A1_1[0][j]='2';
		A1_1[79][j]='2';
	}
	for(i=0;i<80;i++)
	{
		A1_1[i][0]='2';
		A1_1[i][179]='2';
	}
	
	for(i=0;i<40;i++)     //障礙物 
	{
		for(j=68;j<87;j++)
		{
			A1_1[i][j]='2';
		}
	}
	
	for(i=30;i<50;i++)      //終點 
	{
		for(j=150;j<165;j++)
		{
			A1_1[i][j]='3';
		}
	}
};
void A1_Output()   //繪製出整個圖案  
{
	
	int A1_pixel=8;
	TransparentBlt(dc2,0,0,1480,1080,p[52].dc,0,0,p[52].width,p[52].height,RGB(255,255,254));
	for(i=0;i<80;i++)  
	{
		for(j=0;j<180;j++)
		{	
			if (A1_1[79-i][j]=='0')
			;
			else if (A1_1[79-i][j]=='2')  //陣列為'2'-->輸出邊界 +障礙物 
				TransparentBlt(dc2,j*A1_pixel,i*A1_pixel,A1_pixel,A1_pixel,p[11].dc,0,0,p[11].width,p[11].height,RGB(255,255,255));
			else if (A1_1[79-i][j]=='3')  //陣列為'3'-->輸出終點
				TransparentBlt(dc2,j*A1_pixel,i*A1_pixel,A1_pixel,A1_pixel,p[11].dc,0,0,p[11].width,p[11].height,RGB(255,255,255));
			else if (A1_1[79-i][j]=='1') 
				TransparentBlt(dc2,j*A1_pixel,i*A1_pixel,A1_pixel,A1_pixel,p[30].dc,0,0,p[30].width,p[30].height,RGB(255,255,255));
		} 
	}
	StretchBlt(dc1,0,0,client_sw,client_sh,dc2,0,0,sw,sh,SRCCOPY); 
};


void A1_Convert()  //將滑鼠的移動轉換成參數  
{	
	dd=(mouse1.x-mouse2.x)*(mouse1.x-mouse2.x)+(mouse1.y-mouse2.y)*(mouse1.y-mouse2.y);
	d=sqrt(dd);
	cos1=(mouse1.x-mouse2.x ) / d;
	sin1=-(mouse1.y-mouse2.y ) / d;
	V0=d/15;
	if (V0>20)
	{
	 	V0=20;
	}
};
	
void A1_Path_Simulation()      //模擬斜面拋射的軌跡 
{
	float_x=1 +V0*cos1*t;
	float_y=1+V0*sin1*t-0.5*0.98*t*t;
	x = round(float_x);
	y = round(float_y);
};

void A1_GetMouse()  //偵側滑鼠的移動
{
	//ScreenToClient(hwnd,&mouse1) ;
	GetCursorPos(&mouse1);
	while(GetAsyncKeyState(1)<0)
	{
		 
		//ScreenToClient(hwnd,&mouse2) ;
		GetCursorPos(&mouse2);
		
		
		A1_Output() ;
		MoveToEx(dc1 , mouse1.x,mouse1.y, (LPPOINT) NULL); 		
		LineTo(  dc1 , mouse2.x,mouse2.y );
		
		A1_Convert();
		
		
		A1_Output() ;
		int penWidth = 1;
		HPEN hPen,hOldPen;
		hPen = CreatePen(PS_SOLID, 2, RGB(255,  0, 0));	
		hOldPen = (HPEN)SelectObject(dc1, hPen);	
		MoveToEx(dc1 , mouse1.x,mouse1.y, (LPPOINT) NULL); 		
		LineTo(  dc1 , mouse2.x,mouse2.y );
		
		char display[100]; 	
		sprintf(display,"仰角=%3.0f°力量=%.1f",100*sin1,V0);
		TextOut(dc2,1490,800,display,strlen(display) );
		StretchBlt(dc1,0,0,client_sw,client_sh,dc2,0,0,sw,sh,SRCCOPY); 
		
		while(PeekMessage( &msg, NULL, 0, 0, PM_REMOVE ) > 0)
		{
			TranslateMessage( &msg );
			DispatchMessage( &msg );
		}
	}
};
  
 
void A1_BoundaryStop() 	 //箭射到邊界後即停止 
{
	if(x>=179 )          //邊界
		{
			x=178;t=40;
		} 
	if(x<=0 ) 
		{
			x=1;t=40;
			} 
	if(y>=79 ) 
		{
			y=78;t=40;
		} 
	if(y<=0 ) 
		{
			y=1;t=40;
		} 
		
	if(A1_1[y][x]>='2')    //障礙物 
	{
		t=40;
	}
	if( A1_1[y][x]=='3')   //終點
	{
		Win=1;
	}	
	
} ;

int Level_1_1( )
{
	Win=0;
	memset(A1_1,'0',sizeof(A1_1));
	A1_Boundary();
	A1_1[1][1]='1';
	A1_Output();
	char display[100];  
	while(1)
	{
		if (GetAsyncKeyState(1)<0)     //滑鼠一按下去，便開始偵測鼠標位置 
		{
			A1_GetMouse() ;  //偵側滑鼠的移動，並轉換成參數  
			for(t=0; t<40 ;t++)
			{
				Win=0;                   // Win=0未贏     Win=1 贏    
				A1_1[y][x]='0';		   //軌跡保留 
				A1_Path_Simulation();    //模擬斜面拋射的軌跡 
				A1_BoundaryStop();   //箭射到邊界後即停止 
				A1_1[y][x]='1';       //新的點 
				
				A1_Output();
			 
			 	
				sprintf(display,"仰角=%3.0f°力量=%.1f",sin1,V0);
				TextOut(dc2,1490,800,display,strlen(display) );
				StretchBlt(dc1,0,0,client_sw,client_sh,dc2,0,0,sw,sh,SRCCOPY); 
						
				if( Win==1)
				{
					TextOut(dc2,1490,1000,"You Win",strlen("You Win"));
				}			
			}	
		}
		
		if (Win==1 || GetAsyncKeyState(27)<0)   //按esc結束 
		{
			Level=10;
			fromlevel=11;
			break;
		}
		Sleep(50);
		while(PeekMessage( &msg, NULL, 0, 0, PM_REMOVE ) > 0)
		{
			TranslateMessage( &msg );
			DispatchMessage( &msg );
		}
	}
	return 0;
};
///////////////////////////////   }弓箭射手///////////////////////////////////////////


int main()
{
	Window_Picture();
	Level=10;
	fromlevel=0;
	while(Level!=0)                                
	{
		switch (Level)
		{
			case 10: 
				Level_1(); 
				break;
			case 11: 
				Level_1_1(); 
				break;
			default: 
				break;
		};
		
	} 
	//將資源還給系統
	ReleaseDC(hwnd,dc1);
	DeleteDC(dc2);
	DeleteObject(hbm);
}

